/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { IntersectionObserverDirective } from '../directives/intersection-observer.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../directives/intersection-observer.directive';
var IntersectionObserveeService = /** @class */ (function (_super) {
    tslib_1.__extends(IntersectionObserveeService, _super);
    function IntersectionObserveeService(_a, observer) {
        var nativeElement = _a.nativeElement;
        var _this = _super.call(this, function (subscriber) {
            observer.observe(nativeElement, function (entries) {
                subscriber.next(entries);
            });
            return function () {
                observer.unobserve(nativeElement);
            };
        }) || this;
        return _this.pipe(share());
    }
    /** @nocollapse */
    IntersectionObserveeService.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: IntersectionObserverDirective, decorators: [{ type: Inject, args: [IntersectionObserverDirective,] }] }
    ]; };
IntersectionObserveeService.ɵfac = function IntersectionObserveeService_Factory(t) { return new (t || IntersectionObserveeService)(ɵngcc0.ɵɵinject(ElementRef), ɵngcc0.ɵɵinject(IntersectionObserverDirective)); };
IntersectionObserveeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: IntersectionObserveeService, factory: function (t) { return IntersectionObserveeService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IntersectionObserveeService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }, { type: ɵngcc1.IntersectionObserverDirective, decorators: [{
                type: Inject,
                args: [IntersectionObserverDirective]
            }] }]; }, null); })();
    return IntersectionObserveeService;
}(Observable));
export { IntersectionObserveeService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVlLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIkBuZy13ZWItYXBpcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIvc2VydmljZXMvaW50ZXJzZWN0aW9uLW9ic2VydmVlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFDLDZCQUE2QixFQUFDLE1BQU0sK0NBQStDLENBQUM7OztBQUU1RjtBQUN1RCxJQUFOLHVEQUF1QztBQUFFLElBQ3RGLHFDQUNJLEVBQXdELEVBRXhELFFBQXVDO0FBQzdDLFlBSDJCLGdDQUFhO0FBQUcsUUFEekMsWUFLSSxrQkFBTSxVQUFBLFVBQVU7QUFBSyxZQUNqQixRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxVQUFBLE9BQU87QUFBSyxnQkFDeEMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN6QyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsWUFDWSxPQUFPO0FBQ2IsZ0JBQVUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNsRCxZQUFZLENBQUMsQ0FBQztBQUNkLFFBQVEsQ0FBQyxDQUFDLFNBR0w7QUFDTCxRQUZRLE9BQU8sS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLElBQUksQ0FBQyxBQWpCQztBQUFFO3dDQURQLFVBQVUsbERBQ3FCO0FBQ25CLGdCQVBMLFVBQVUsdUJBUVQsTUFBTSxTQUFDLFVBQVU7QUFBVSxnQkFMNUIsNkJBQTZCLHVCQU01QixNQUFNLFNBQUMsNkJBQTZCO0FBQ3ZDOzs7Ozs7Ozs7OztrQ0FBUztBQUFFLElBY2pCLGtDQUFDO0FBQ0EsQ0FEQSxBQW5CRCxDQUNpRCxVQUFVLEdBa0IxRDs7QUF4QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUZBLEFBQUEsQUFEQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFHQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWxCQSxBQUFBLEFBTEEsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBTEEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBZUEsQUFBQSxBQUFBLEFBbkJBLEFBQ0EsQUFBQSxBQWtCQSxBQWxCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge3NoYXJlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7SW50ZXJzZWN0aW9uT2JzZXJ2ZXJEaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLmRpcmVjdGl2ZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlZVNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXT4ge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8RWxlbWVudD4sXHJcbiAgICAgICAgQEluamVjdChJbnRlcnNlY3Rpb25PYnNlcnZlckRpcmVjdGl2ZSlcclxuICAgICAgICBvYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJEaXJlY3RpdmUsXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihzdWJzY3JpYmVyID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShuYXRpdmVFbGVtZW50LCBlbnRyaWVzID0+IHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChlbnRyaWVzKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKG5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5waXBlKHNoYXJlKCkpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==