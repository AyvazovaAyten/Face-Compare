/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { INTERSECTION_ROOT_MARGIN } from '../tokens/intersection-root-margin';
import { INTERSECTION_THRESHOLD } from '../tokens/intersection-threshold';
import { INTERSECTION_OBSERVER_SUPPORT } from '../tokens/support';
import * as ɵngcc0 from '@angular/core';
var IntersectionObserverService = /** @class */ (function (_super) {
    tslib_1.__extends(IntersectionObserverService, _super);
    function IntersectionObserverService(_a, support, rootMargin, threshold, root) {
        var nativeElement = _a.nativeElement;
        var _this = _super.call(this, function (subscriber) {
            if (!support) {
                subscriber.error('IntersectionObserver is not supported in your browser');
                return;
            }
            /** @type {?} */
            var observer = new IntersectionObserver(function (entries) {
                subscriber.next(entries);
            }, {
                root: root && root.nativeElement,
                rootMargin: rootMargin,
                threshold: threshold,
            });
            observer.observe(nativeElement);
            return function () {
                observer.disconnect();
            };
        }) || this;
        return _this.pipe(share());
    }
    /** @nocollapse */
    IntersectionObserverService.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [INTERSECTION_OBSERVER_SUPPORT,] }] },
        { type: String, decorators: [{ type: Inject, args: [INTERSECTION_ROOT_MARGIN,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [INTERSECTION_THRESHOLD,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INTERSECTION_ROOT,] }] }
    ]; };
IntersectionObserverService.ɵfac = function IntersectionObserverService_Factory(t) { return new (t || IntersectionObserverService)(ɵngcc0.ɵɵinject(ElementRef), ɵngcc0.ɵɵinject(INTERSECTION_OBSERVER_SUPPORT), ɵngcc0.ɵɵinject(INTERSECTION_ROOT_MARGIN), ɵngcc0.ɵɵinject(INTERSECTION_THRESHOLD), ɵngcc0.ɵɵinject(INTERSECTION_ROOT, 8)); };
IntersectionObserverService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: IntersectionObserverService, factory: function (t) { return IntersectionObserverService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IntersectionObserverService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }, { type: Boolean, decorators: [{
                type: Inject,
                args: [INTERSECTION_OBSERVER_SUPPORT]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [INTERSECTION_ROOT_MARGIN]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [INTERSECTION_THRESHOLD]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [INTERSECTION_ROOT]
            }] }]; }, null); })();
    return IntersectionObserverService;
}(Observable));
export { IntersectionObserverService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIkBuZy13ZWItYXBpcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIvc2VydmljZXMvaW50ZXJzZWN0aW9uLW9ic2VydmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQzVFLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQ3hFLE9BQU8sRUFBQyw2QkFBNkIsRUFBQyxNQUFNLG1CQUFtQixDQUFDOztBQUVoRTtBQUN1RCxJQUFOLHVEQUF1QztBQUFFLElBQ3RGLHFDQUNJLEVBQXdELEVBQ2pCLE9BQWdCLEVBQ3JCLFVBQWtCLEVBQ3BCLFNBQTRCLEVBQ3JCLElBQWdDO0FBQzdFLFlBTDJCLGdDQUFhO0FBQUcsUUFEekMsWUFPSSxrQkFBTSxVQUFBLFVBQVU7QUFBSyxZQUNqQixJQUFJLENBQUMsT0FBTyxFQUFFO0FBQzFCLGdCQUFnQixVQUFVLENBQUMsS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUM7QUFDMUYsZ0JBQ2dCLE9BQU87QUFDdkIsYUFBYTtBQUNiO0FBQzRCLGdCQUFWLFFBQVEsR0FBRyxJQUFJLG9CQUFvQixDQUNyQyxVQUFBLE9BQU87QUFBSyxnQkFDUixVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLFlBQWdCLENBQUMsRUFDRDtBQUNoQixnQkFBb0IsSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYTtBQUNwRCxnQkFBb0IsVUFBVSxZQUFBO0FBQzlCLGdCQUFvQixTQUFTLFdBQUE7QUFDN0IsYUFBaUIsQ0FDSjtBQUNiLFlBQ1ksUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUM1QyxZQUNZLE9BQU87QUFDYixnQkFBVSxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDdEMsWUFBWSxDQUFDLENBQUM7QUFDZCxRQUFRLENBQUMsQ0FBQyxTQUdMO0FBQ0wsUUFGUSxPQUFPLEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUNsQyxJQUFJLENBQUMsQUFsQ0M7QUFBRTt3Q0FEUCxVQUFVLGxEQUNxQjtBQUNuQixnQkFWTCxVQUFVLHVCQVdULE1BQU0sU0FBQyxVQUFVO0FBQVUsOENBQzNCLE1BQU0sU0FBQyw2QkFBNkI7QUFBVSw2Q0FDOUMsTUFBTSxTQUFDLHdCQUF3QjtBQUFVLGdEQUN6QyxNQUFNLFNBQUMsc0JBQXNCO0FBQVUsZ0RBQ3ZDLFFBQVEsWUFBSSxNQUFNLFNBQUMsaUJBQWlCO0FBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBQVM7QUFBRSxJQTZCakUsa0NBQUM7QUFDQSxDQURBLEFBcENELENBQ2lELFVBQVUsR0FtQzFEOztBQTVDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUpBLEFBQUEsQUFEQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFHQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQW5DQSxBQUFBLEFBUkEsQUFBQSxBQVdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBNkJBLEFBQUEsQUFBQSxBQXBDQSxBQUNBLEFBQUEsQUFtQ0EsQUFuQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7c2hhcmV9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHtJTlRFUlNFQ1RJT05fUk9PVH0gZnJvbSAnLi4vdG9rZW5zL2ludGVyc2VjdGlvbi1yb290JztcclxuaW1wb3J0IHtJTlRFUlNFQ1RJT05fUk9PVF9NQVJHSU59IGZyb20gJy4uL3Rva2Vucy9pbnRlcnNlY3Rpb24tcm9vdC1tYXJnaW4nO1xyXG5pbXBvcnQge0lOVEVSU0VDVElPTl9USFJFU0hPTER9IGZyb20gJy4uL3Rva2Vucy9pbnRlcnNlY3Rpb24tdGhyZXNob2xkJztcclxuaW1wb3J0IHtJTlRFUlNFQ1RJT05fT0JTRVJWRVJfU1VQUE9SVH0gZnJvbSAnLi4vdG9rZW5zL3N1cHBvcnQnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJTZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10+IHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEVsZW1lbnQ+LFxyXG4gICAgICAgIEBJbmplY3QoSU5URVJTRUNUSU9OX09CU0VSVkVSX1NVUFBPUlQpIHN1cHBvcnQ6IGJvb2xlYW4sXHJcbiAgICAgICAgQEluamVjdChJTlRFUlNFQ1RJT05fUk9PVF9NQVJHSU4pIHJvb3RNYXJnaW46IHN0cmluZyxcclxuICAgICAgICBASW5qZWN0KElOVEVSU0VDVElPTl9USFJFU0hPTEQpIHRocmVzaG9sZDogbnVtYmVyIHwgbnVtYmVyW10sXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChJTlRFUlNFQ1RJT05fUk9PVCkgcm9vdDogRWxlbWVudFJlZjxFbGVtZW50PiB8IG51bGwsXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihzdWJzY3JpYmVyID0+IHtcclxuICAgICAgICAgICAgaWYgKCFzdXBwb3J0KSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKCdJbnRlcnNlY3Rpb25PYnNlcnZlciBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgYnJvd3NlcicpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXHJcbiAgICAgICAgICAgICAgICBlbnRyaWVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZW50cmllcyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IHJvb3QgJiYgcm9vdC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RNYXJnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUobmF0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5waXBlKHNoYXJlKCkpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==