/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Attribute, Directive, Inject, Optional, } from '@angular/core';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { rootMarginFactory } from '../utils/root-margin-factory';
import { thresholdFactory } from '../utils/threshold-factory';
import * as ɵngcc0 from '@angular/core';
var IntersectionObserverDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IntersectionObserverDirective, _super);
    function IntersectionObserverDirective(root, rootMargin, threshold) {
        var _this = _super.call(this, function (entries) {
            _this.callbacks.forEach(function (callback, element) {
                /** @type {?} */
                var filtered = entries.filter(function (_a) {
                    var target = _a.target;
                    return target === element;
                });
                return filtered.length && callback(filtered, _this);
            });
        }, {
            root: root && root.nativeElement,
            rootMargin: rootMarginFactory(rootMargin),
            threshold: thresholdFactory(threshold),
        }) || this;
        _this.callbacks = new Map();
        return _this;
    }
    /**
     * @param {?} target
     * @param {?=} callback
     * @return {?}
     */
    IntersectionObserverDirective.prototype.observe = /**
     * @param {?} target
     * @param {?=} callback
     * @return {?}
     */
    function (target, callback) {
        if (callback === void 0) { callback = function () { }; }
        _super.prototype.observe.call(this, target);
        this.callbacks.set(target, callback);
    };
    /**
     * @param {?} target
     * @return {?}
     */
    IntersectionObserverDirective.prototype.unobserve = /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        _super.prototype.unobserve.call(this, target);
        this.callbacks.delete(target);
    };
    /**
     * @return {?}
     */
    IntersectionObserverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disconnect();
    };
    /** @nocollapse */
    IntersectionObserverDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INTERSECTION_ROOT,] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionRootMargin',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionThreshold',] }] }
    ]; };
IntersectionObserverDirective.ɵfac = function IntersectionObserverDirective_Factory(t) { return new (t || IntersectionObserverDirective)(ɵngcc0.ɵɵdirectiveInject(INTERSECTION_ROOT, 8), ɵngcc0.ɵɵinjectAttribute('waIntersectionRootMargin'), ɵngcc0.ɵɵinjectAttribute('waIntersectionThreshold')); };
IntersectionObserverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IntersectionObserverDirective, selectors: [["", "waIntersectionObserver", ""]], exportAs: ["IntersectionObserver"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IntersectionObserverDirective, [{
        type: Directive,
        args: [{
                selector: '[waIntersectionObserver]',
                exportAs: 'IntersectionObserver'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [INTERSECTION_ROOT]
            }] }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['waIntersectionRootMargin']
            }] }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['waIntersectionThreshold']
            }] }]; }, null); })();
    return IntersectionObserverDirective;
}(IntersectionObserver));
export { IntersectionObserverDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IntersectionObserverDirective.prototype.callbacks;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQG5nLXdlYi1hcGlzL2ludGVyc2VjdGlvbi1vYnNlcnZlci9kaXJlY3RpdmVzL2ludGVyc2VjdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFNBQVMsRUFFVCxNQUFNLEVBRU4sUUFBUSxHQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDOztBQUU1RDtBQUVlLElBRW9DLHlEQUFvQjtBQUN2RSxJQUdJLHVDQUMyQyxJQUFnQyxFQUNoQyxVQUF5QixFQUMxQixTQUF3QjtBQUNwRSxRQUpFLFlBS0ksa0JBQ0ksVUFBQSxPQUFPO0FBQUssWUFDUixLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQVEsRUFBRSxPQUFPO0FBQUs7QUFDL0Isb0JBQUwsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQyxFQUFRO0FBQUssd0JBQVosa0JBQU07QUFBRyxvQkFBRyxPQUFBLE1BQU0sS0FBSyxPQUFPO0FBQUcsZ0JBQXJCLENBQWtCLENBQUM7QUFDckYsZ0JBQ29CLE9BQU8sUUFBUSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLEtBQUksQ0FBQyxDQUFDO0FBQ3ZFLFlBQWdCLENBQUMsQ0FBQyxDQUFDO0FBQ25CLFFBQVksQ0FBQyxFQUNEO0FBQ1osWUFBZ0IsSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYTtBQUNoRCxZQUFnQixVQUFVLEVBQUUsaUJBQWlCLENBQUMsVUFBVSxDQUFDO0FBQ3pELFlBQWdCLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUM7QUFDdEQsU0FBYSxDQUNKLFNBQ0o7QUFDTCxRQXRCcUIsZUFBUyxHQUFHLElBQUksR0FBRyxFQUF5QyxDQUFDO0FBQ2xGO0FBRUcsSUFrQkMsQ0FBQztBQUNMO0FBQ087QUFBMEI7QUFBNkI7QUFBb0I7QUFDMUUsSUFESiwrQ0FBTztBQUFRO0FBQTBCO0FBQTZCO0FBQy9EO0FBQVMsSUFEaEIsVUFBUSxNQUFlLEVBQUUsUUFBaUQ7QUFDOUUsUUFENkIseUJBQUEsRUFBQSx5QkFBZ0QsQ0FBQztBQUM5RSxRQUFRLGlCQUFNLE9BQU8sWUFBQyxNQUFNLENBQUMsQ0FBQztBQUM5QixRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM3QyxJQUFJLENBQUM7QUFDSjtBQUNPO0FBQ1I7QUFBb0I7QUFBUyxJQUR6QixpREFBUztBQUFRO0FBQ1I7QUFBb0I7QUFDekIsSUFGSixVQUFVLE1BQWU7QUFDN0IsUUFBUSxpQkFBTSxTQUFTLFlBQUMsTUFBTSxDQUFDLENBQUM7QUFDaEMsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxJQUFJLENBQUM7QUFDSjtBQUNPO0FBQ0Q7QUFBUyxJQURaLG1EQUFXO0FBQ2I7QUFBb0I7QUFDbkIsSUFGQztBQUFlLFFBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQzFCLElBQUksQ0FBQyxDQXJDSTtBQUFFOzBDQUpWLFNBQVMsU0FBQyw1REFJd0I7UUFIL0IsUUFBUSxFQUFFLDBCQUEwQix1QkFDcEMsUUFBUSxFQUFFLHNCQUFzQixuR0FJM0IsZ0RBR0EsUUFBUSxZQUFJLE1BQU0sU0FBQyxpQkFBaUI7U0FONUMsVEFNc0QsZ0RBQzlDLFNBQVMsU0FBQywwQkFBMEI7QUFBVSxnREFDOUMsU0FBUyxTQUFDLHlCQUF5QjtBQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FBUztBQUFFLElBK0JoRSxvQ0FBQztBQUNBLENBREEsQUExQ0QsQ0FJbUQsb0JBQW9CLEdBc0N0RTtBQUNELFNBdkNhLDZCQUE2QjtBQUFLO0FBQWM7QUFBUztBQUN2RDtBQUNYO0FBQVMsSUFBVCxrREFBOEU7O0FBbEJBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUlBLEFBQUEsQUFJQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUhBLEFBS0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFyQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFxQkEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF6Q0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQStCQSxBQUFBLEFBQUEsQUExQ0EsQUFJQSxBQUFBLEFBc0NBLEFBdENBLEFBQUEsQUFFQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIEF0dHJpYnV0ZSxcclxuICAgIERpcmVjdGl2ZSxcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBJbmplY3QsXHJcbiAgICBPbkRlc3Ryb3ksXHJcbiAgICBPcHRpb25hbCxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtJTlRFUlNFQ1RJT05fUk9PVH0gZnJvbSAnLi4vdG9rZW5zL2ludGVyc2VjdGlvbi1yb290JztcclxuaW1wb3J0IHtyb290TWFyZ2luRmFjdG9yeX0gZnJvbSAnLi4vdXRpbHMvcm9vdC1tYXJnaW4tZmFjdG9yeSc7XHJcbmltcG9ydCB7dGhyZXNob2xkRmFjdG9yeX0gZnJvbSAnLi4vdXRpbHMvdGhyZXNob2xkLWZhY3RvcnknO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1t3YUludGVyc2VjdGlvbk9ic2VydmVyXScsXHJcbiAgICBleHBvcnRBczogJ0ludGVyc2VjdGlvbk9ic2VydmVyJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyRGlyZWN0aXZlIGV4dGVuZHMgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcclxuICAgIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2FsbGJhY2tzID0gbmV3IE1hcDxFbGVtZW50LCBJbnRlcnNlY3Rpb25PYnNlcnZlckNhbGxiYWNrPigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBJbmplY3QoSU5URVJTRUNUSU9OX1JPT1QpIHJvb3Q6IEVsZW1lbnRSZWY8RWxlbWVudD4gfCBudWxsLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ3dhSW50ZXJzZWN0aW9uUm9vdE1hcmdpbicpIHJvb3RNYXJnaW46IHN0cmluZyB8IG51bGwsXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnd2FJbnRlcnNlY3Rpb25UaHJlc2hvbGQnKSB0aHJlc2hvbGQ6IHN0cmluZyB8IG51bGwsXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihcclxuICAgICAgICAgICAgZW50cmllcyA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5mb3JFYWNoKChjYWxsYmFjaywgZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkID0gZW50cmllcy5maWx0ZXIoKHt0YXJnZXR9KSA9PiB0YXJnZXQgPT09IGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyZWQubGVuZ3RoICYmIGNhbGxiYWNrKGZpbHRlcmVkLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByb290OiByb290ICYmIHJvb3QubmF0aXZlRWxlbWVudCxcclxuICAgICAgICAgICAgICAgIHJvb3RNYXJnaW46IHJvb3RNYXJnaW5GYWN0b3J5KHJvb3RNYXJnaW4pLFxyXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkOiB0aHJlc2hvbGRGYWN0b3J5KHRocmVzaG9sZCksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBvYnNlcnZlKHRhcmdldDogRWxlbWVudCwgY2FsbGJhY2s6IEludGVyc2VjdGlvbk9ic2VydmVyQ2FsbGJhY2sgPSAoKSA9PiB7fSkge1xyXG4gICAgICAgIHN1cGVyLm9ic2VydmUodGFyZ2V0KTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrcy5zZXQodGFyZ2V0LCBjYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5vYnNlcnZlKHRhcmdldDogRWxlbWVudCkge1xyXG4gICAgICAgIHN1cGVyLnVub2JzZXJ2ZSh0YXJnZXQpO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLmRlbGV0ZSh0YXJnZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==