/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Inject } from '@angular/core';
import { Observable } from 'rxjs';
import { IntersectionObserveeService } from '../services/intersection-observee.service';
// @dynamic
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'rxjs';
export class IntersectionObserveeDirective {
    /**
     * @param {?} waIntersectionObservee
     */
    constructor(waIntersectionObservee) {
        this.waIntersectionObservee = waIntersectionObservee;
    }
}
IntersectionObserveeDirective.ɵfac = function IntersectionObserveeDirective_Factory(t) { return new (t || IntersectionObserveeDirective)(ɵngcc0.ɵɵdirectiveInject(IntersectionObserveeService)); };
IntersectionObserveeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IntersectionObserveeDirective, selectors: [["", "waIntersectionObservee", ""]], outputs: { waIntersectionObservee: "waIntersectionObservee" }, features: [ɵngcc0.ɵɵProvidersFeature([IntersectionObserveeService])] });
/** @nocollapse */
IntersectionObserveeDirective.ctorParameters = () => [
    { type: Observable, decorators: [{ type: Inject, args: [IntersectionObserveeService,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IntersectionObserveeDirective, [{
        type: Directive,
        args: [{
                selector: '[waIntersectionObservee]',
                outputs: ['waIntersectionObservee'],
                providers: [IntersectionObserveeService]
            }]
    }], function () { return [{ type: ɵngcc1.Observable, decorators: [{
                type: Inject,
                args: [IntersectionObserveeService]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    IntersectionObserveeDirective.prototype.waIntersectionObservee;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQG5nLXdlYi1hcGlzL2ludGVyc2VjdGlvbi1vYnNlcnZlci9kaXJlY3RpdmVzL2ludGVyc2VjdGlvbi1vYnNlcnZlZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sMkNBQTJDLENBQUM7QUFDdEY7OztBQU9BLE1BQU0sT0FBTyw2QkFBNkI7QUFDMUM7QUFBUztBQUN3QjtBQUFTLElBRHRDLFlBRWEsc0JBQStEO0FBQzlFLFFBRGUsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF5QztBQUFFLElBQzNFLENBQUM7QUFDUjsyREFWQyxTQUFTLFNBQUMsbUJBQ1AsUUFBUSxFQUFFLDBCQUEwQixtQkFDcEMsT0FBTyxFQUFFLENBQUMsd0JBQXdCLENBQUM7U0FDbkMsU0FBUyxFQUFFLENBQUMsMkJBQTJCLENBQUMsZ0JBQzNDLDROQUNJO0FBQUU7QUFBb0I7QUFFUixZQVhYLFVBQVUsdUJBV1QsTUFBTSxTQUFDLDJCQUEyQjtBQUNyQzs7Ozs7Ozs7Ozs7a0NBQUU7QUFBRTtBQUFjO0FBQXNCLElBRHRDLCtEQUN3RTs7QUFiQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVRBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFSQSxBQUFBLEFBV0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7SW50ZXJzZWN0aW9uT2JzZXJ2ZWVTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZWUuc2VydmljZSc7XHJcblxyXG4vLyBAZHluYW1pY1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3dhSW50ZXJzZWN0aW9uT2JzZXJ2ZWVdJyxcclxuICAgIG91dHB1dHM6IFsnd2FJbnRlcnNlY3Rpb25PYnNlcnZlZSddLFxyXG4gICAgcHJvdmlkZXJzOiBbSW50ZXJzZWN0aW9uT2JzZXJ2ZWVTZXJ2aWNlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVlRGlyZWN0aXZlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBJbmplY3QoSW50ZXJzZWN0aW9uT2JzZXJ2ZWVTZXJ2aWNlKVxyXG4gICAgICAgIHJlYWRvbmx5IHdhSW50ZXJzZWN0aW9uT2JzZXJ2ZWU6IE9ic2VydmFibGU8SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdPixcclxuICAgICkge31cclxufVxyXG4iXX0=