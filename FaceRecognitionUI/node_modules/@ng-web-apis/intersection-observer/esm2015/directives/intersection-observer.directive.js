/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Attribute, Directive, Inject, Optional, } from '@angular/core';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { rootMarginFactory } from '../utils/root-margin-factory';
import { thresholdFactory } from '../utils/threshold-factory';
import * as ɵngcc0 from '@angular/core';
export class IntersectionObserverDirective extends IntersectionObserver {
    /**
     * @param {?} root
     * @param {?} rootMargin
     * @param {?} threshold
     */
    constructor(root, rootMargin, threshold) {
        super(entries => {
            this.callbacks.forEach((callback, element) => {
                /** @type {?} */
                const filtered = entries.filter(({ target }) => target === element);
                return filtered.length && callback(filtered, this);
            });
        }, {
            root: root && root.nativeElement,
            rootMargin: rootMarginFactory(rootMargin),
            threshold: thresholdFactory(threshold),
        });
        this.callbacks = new Map();
    }
    /**
     * @param {?} target
     * @param {?=} callback
     * @return {?}
     */
    observe(target, callback = () => { }) {
        super.observe(target);
        this.callbacks.set(target, callback);
    }
    /**
     * @param {?} target
     * @return {?}
     */
    unobserve(target) {
        super.unobserve(target);
        this.callbacks.delete(target);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disconnect();
    }
}
IntersectionObserverDirective.ɵfac = function IntersectionObserverDirective_Factory(t) { return new (t || IntersectionObserverDirective)(ɵngcc0.ɵɵdirectiveInject(INTERSECTION_ROOT, 8), ɵngcc0.ɵɵinjectAttribute('waIntersectionRootMargin'), ɵngcc0.ɵɵinjectAttribute('waIntersectionThreshold')); };
IntersectionObserverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: IntersectionObserverDirective, selectors: [["", "waIntersectionObserver", ""]], exportAs: ["IntersectionObserver"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
IntersectionObserverDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INTERSECTION_ROOT,] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionRootMargin',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['waIntersectionThreshold',] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IntersectionObserverDirective, [{
        type: Directive,
        args: [{
                selector: '[waIntersectionObserver]',
                exportAs: 'IntersectionObserver'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [INTERSECTION_ROOT]
            }] }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['waIntersectionRootMargin']
            }] }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['waIntersectionThreshold']
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    IntersectionObserverDirective.prototype.callbacks;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQG5nLXdlYi1hcGlzL2ludGVyc2VjdGlvbi1vYnNlcnZlci9kaXJlY3RpdmVzL2ludGVyc2VjdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsU0FBUyxFQUVULE1BQU0sRUFFTixRQUFRLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7O0FBTTVELE1BQU0sT0FBTyw2QkFBOEIsU0FBUSxvQkFBb0I7QUFDckU7QUFBUztBQUNKO0FBQThCO0FBQTZCO0FBQVMsSUFFdkUsWUFDMkMsSUFBZ0MsRUFDaEMsVUFBeUIsRUFDMUIsU0FBd0I7QUFDcEUsUUFDTSxLQUFLLENBQ0QsT0FBTyxDQUFDLEVBQUU7QUFDdEIsWUFBZ0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUU7QUFDN0Q7QUFBa0Msc0JBQVIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDO0FBQ3JGLGdCQUNvQixPQUFPLFFBQVEsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2RSxZQUFnQixDQUFDLENBQUMsQ0FBQztBQUNuQixRQUFZLENBQUMsRUFDRDtBQUNaLFlBQWdCLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWE7QUFDaEQsWUFBZ0IsVUFBVSxFQUFFLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztBQUN6RCxZQUFnQixTQUFTLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO0FBQ3RELFNBQWEsQ0FDSixDQUFDO0FBQ1YsUUFyQnFCLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBeUMsQ0FBQztBQUNsRixJQW9CSSxDQUFDO0FBQ0w7QUFDTztBQUEwQjtBQUE2QjtBQUFvQjtBQUMxRSxJQURKLE9BQU8sQ0FBQyxNQUFlLEVBQUUsV0FBeUMsR0FBRyxFQUFFLEdBQUUsQ0FBQztBQUM5RSxRQUFRLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUIsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDN0MsSUFBSSxDQUFDO0FBQ0w7QUFDTztBQUEwQjtBQUNkO0FBQVMsSUFEeEIsU0FBUyxDQUFDLE1BQWU7QUFDN0IsUUFBUSxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEMsSUFBSSxDQUFDO0FBQ0w7QUFDTztBQUNEO0FBQVMsSUFEWCxXQUFXO0FBQ2YsUUFBUSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDMUIsSUFBSSxDQUFDO0FBQ0w7MkRBMUNDLFNBQVMsU0FBQyxtQkFDUCxRQUFRLEVBQUUsMEJBQTBCLG1CQUNwQyxRQUFRLEVBQUUsc0JBQXNCLGdCQUNuQzsyT0FDSTtBQUFFO0FBQW9CO0FBQ2pCLDRDQUlELFFBQVEsWUFBSSxNQUFNLFNBQUMsaUJBQWlCO0FBQVUsNENBQzlDLFNBQVMsU0FBQywwQkFBMEI7QUFBVSw0Q0FDOUMsU0FBUyxTQUFDLHlCQUF5QjtBQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBQUU7QUFBRTtBQUFjO0FBQ2hFO0FBRVA7QUFBaUI7QUFDakIsSUFUSSxrREFBOEU7O0FBbEJBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBcEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBcUJBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF6Q0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUxBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQXR0cmlidXRlLFxyXG4gICAgRGlyZWN0aXZlLFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIEluamVjdCxcclxuICAgIE9uRGVzdHJveSxcclxuICAgIE9wdGlvbmFsLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0lOVEVSU0VDVElPTl9ST09UfSBmcm9tICcuLi90b2tlbnMvaW50ZXJzZWN0aW9uLXJvb3QnO1xyXG5pbXBvcnQge3Jvb3RNYXJnaW5GYWN0b3J5fSBmcm9tICcuLi91dGlscy9yb290LW1hcmdpbi1mYWN0b3J5JztcclxuaW1wb3J0IHt0aHJlc2hvbGRGYWN0b3J5fSBmcm9tICcuLi91dGlscy90aHJlc2hvbGQtZmFjdG9yeSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3dhSW50ZXJzZWN0aW9uT2JzZXJ2ZXJdJyxcclxuICAgIGV4cG9ydEFzOiAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJEaXJlY3RpdmUgZXh0ZW5kcyBJbnRlcnNlY3Rpb25PYnNlcnZlclxyXG4gICAgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYWxsYmFja3MgPSBuZXcgTWFwPEVsZW1lbnQsIEludGVyc2VjdGlvbk9ic2VydmVyQ2FsbGJhY2s+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChJTlRFUlNFQ1RJT05fUk9PVCkgcm9vdDogRWxlbWVudFJlZjxFbGVtZW50PiB8IG51bGwsXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnd2FJbnRlcnNlY3Rpb25Sb290TWFyZ2luJykgcm9vdE1hcmdpbjogc3RyaW5nIHwgbnVsbCxcclxuICAgICAgICBAQXR0cmlidXRlKCd3YUludGVyc2VjdGlvblRocmVzaG9sZCcpIHRocmVzaG9sZDogc3RyaW5nIHwgbnVsbCxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKFxyXG4gICAgICAgICAgICBlbnRyaWVzID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrLCBlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBlbnRyaWVzLmZpbHRlcigoe3RhcmdldH0pID0+IHRhcmdldCA9PT0gZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZC5sZW5ndGggJiYgY2FsbGJhY2soZmlsdGVyZWQsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJvb3Q6IHJvb3QgJiYgcm9vdC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogcm9vdE1hcmdpbkZhY3Rvcnkocm9vdE1hcmdpbiksXHJcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IHRocmVzaG9sZEZhY3RvcnkodGhyZXNob2xkKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG9ic2VydmUodGFyZ2V0OiBFbGVtZW50LCBjYWxsYmFjazogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWxsYmFjayA9ICgpID0+IHt9KSB7XHJcbiAgICAgICAgc3VwZXIub2JzZXJ2ZSh0YXJnZXQpO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldCh0YXJnZXQsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICB1bm9ic2VydmUodGFyZ2V0OiBFbGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIudW5vYnNlcnZlKHRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuZGVsZXRlKHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XHJcbiAgICB9XHJcbn1cclxuIl19